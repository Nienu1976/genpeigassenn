using UnityEngine;
using System.Collections.Generic; // List を使うために必要
using TMPro; // もしWordCardUIがTextMeshProUGUIを直接操作する場合に備えて(通常は不要)
using System.Text;


public class PlayableCanvasManager : MonoBehaviour
{
    [Header("札のプレハブ（WordSelectionManagerと同じものを設定）")]
    public GameObject wordCardPrefab_Playable; // Inspectorで「WordCard_Template」プレハブを設定

    [Header("獲得札を並べる親のTransform（インスペクターで設定）")]
    public Transform genjiObtainedCardsGrid_Playable;  // 源氏軍の獲得札を並べる場所
    public Transform heishiObtainedCardsGrid_Playable; // 平氏軍の獲得札を並べる場所
    public Transform emptyCardsGrid_Playable; // もし空札も表示するなら

    [Header("プレイヤー名表示UI（インスペクターで設定、上から順に）")]
    public List<TextMeshProUGUI> genjiPlayerNameDisplayTexts_Playable;  // 源氏軍のプレイヤー名表示用TextMeshProUGUIのリスト
    public List<TextMeshProUGUI> heishiPlayerNameDisplayTexts_Playable; // 平氏軍のプレイヤー名表示用TextMeshProUGUIのリスト
    // ★↑ここまで↑★

    // このCanvasが表示された時に呼び出されるお仕事
    void OnEnable()
    {   Debug.Log("PlayableCanvasManager: OnEnable() が呼び出されました。獲得札の表示を開始します。");
        RefreshAllCardDisplays(); // ★変更：新しい再表示関数を呼び出すようにする★
        DisplayPlayerNames(); // ★追加★
    }
    public void RefreshAllCardDisplays()
    {
        Debug.Log("PlayableCanvasManager: 札表示の更新を開始します...");

        // １．まず、現在表示されている可能性のある全ての札をクリアします
        ClearGrid(genjiObtainedCardsGrid_Playable);
        ClearGrid(heishiObtainedCardsGrid_Playable);
        if (emptyCardsGrid_Playable != null) // 空札グリッドも忘れずにクリア
        {
            ClearGrid(emptyCardsGrid_Playable);
        }
        Debug.Log("PlayableCanvasManager: 既存の札表示を全てクリアしました。");

        // ２．WordDataManagerから最新の札情報を取得して表示します（ここのロジックはDisplayObtainedCardsとほぼ同じです）
        if (WordDataManager.Instance == null)
        {
            Debug.LogError("PlayableCanvasManager: WordDataManagerのインスタンスが見つかりません！札を表示できません。");
            return;
        }
        if (wordCardPrefab_Playable == null) { Debug.LogError("PlayableCanvasManager: wordCardPrefab_Playableが未設定！"); return; }
        if (genjiObtainedCardsGrid_Playable == null) { Debug.LogError("PlayableCanvasManager: genjiObtainedCardsGrid_Playableが未設定！"); return; }
        if (heishiObtainedCardsGrid_Playable == null) { Debug.LogError("PlayableCanvasManager: heishiObtainedCardsGrid_Playableが未設定！"); return; }

        // 源氏軍の獲得札リストを取得して表示
        List<SelectableWordEntry> genjiCardsList = WordDataManager.Instance.GenjiSelectedCards;
        if (genjiCardsList != null && genjiCardsList.Count > 0)
        {
            //Debug.Log($"PlayableCanvasManager: 源氏軍の獲得札 {genjiCardsList.Count}枚を表示します。");
            foreach (SelectableWordEntry cardEntry in genjiCardsList)
            {
                CreateCardOnGrid(cardEntry, genjiObtainedCardsGrid_Playable);
            }
        }
        else
        {
            Debug.Log("PlayableCanvasManager: 表示する源氏軍の札はありません。");
        }

        // 平氏軍の獲得札リストを取得して表示
        List<SelectableWordEntry> heishiCardsList = WordDataManager.Instance.HeishiSelectedCards;
        if (heishiCardsList != null && heishiCardsList.Count > 0)
        {
            //Debug.Log($"PlayableCanvasManager: 平氏軍の獲得札 {heishiCardsList.Count}枚を表示します。");
            foreach (SelectableWordEntry cardEntry in heishiCardsList)
            {
                CreateCardOnGrid(cardEntry, heishiObtainedCardsGrid_Playable);
            }
        }
        else
        {
            Debug.Log("PlayableCanvasManager: 表示する平氏軍の札はありません。");
        }

        // 空札リストを取得して表示
        if (emptyCardsGrid_Playable != null)
        {
            List<SelectableWordEntry> emptyCards = WordDataManager.Instance.EmptyCardsList;
            if (emptyCards != null && emptyCards.Count > 0)
            {
                Debug.Log($"PlayableCanvasManager: 空札 {emptyCards.Count}枚を表示します。");
                foreach (SelectableWordEntry cardEntry in emptyCards)
                {
                    CreateCardOnGrid(cardEntry, emptyCardsGrid_Playable);
                }
            }
            else
            {
                Debug.Log("PlayableCanvasManager: 表示する空札はありません。");
            }
        }
        Debug.Log("PlayableCanvasManager: 最新の状態で札の表示処理が完了しました。");
    }
public WordCardUI FindWordCardByWord(string wordToFind)
{
    if (string.IsNullOrEmpty(wordToFind)) return null;

    // 源氏軍の札グリッドから探す
    if (genjiObtainedCardsGrid_Playable != null)
    {
        foreach (Transform childCardTransform in genjiObtainedCardsGrid_Playable)
        {
            WordCardUI cardUI = childCardTransform.GetComponent<WordCardUI>();
            if (cardUI != null && cardUI.GetWord() == wordToFind)
            {
                Debug.Log($"[PlayableCanvasManager] 源氏軍の札から「{wordToFind}」の WordCardUI を見つけました。");
                return cardUI;
            }
        }
    }

    // 平氏軍の札グリッドから探す
    if (heishiObtainedCardsGrid_Playable != null)
    {
        foreach (Transform childCardTransform in heishiObtainedCardsGrid_Playable)
        {
            WordCardUI cardUI = childCardTransform.GetComponent<WordCardUI>();
            if (cardUI != null && cardUI.GetWord() == wordToFind)
            {
                Debug.Log($"[PlayableCanvasManager] 平氏軍の札から「{wordToFind}」の WordCardUI を見つけました。");
                return cardUI;
            }
        }
    }

    // 空札グリッドからも探す（もし空札も拡大表示の対象になるなら）
    if (emptyCardsGrid_Playable != null)
    {
        foreach (Transform childCardTransform in emptyCardsGrid_Playable)
        {
            WordCardUI cardUI = childCardTransform.GetComponent<WordCardUI>();
            if (cardUI != null && cardUI.GetWord() == wordToFind)
            {
                Debug.Log($"[PlayableCanvasManager] 空札から「{wordToFind}」の WordCardUI を見つけました。");
                return cardUI;
            }
        }
    }

    Debug.LogWarning($"[PlayableCanvasManager] ワード「{wordToFind}」に一致する WordCardUI が見つかりませんでした。");
    return null; // 見つからなかった場合
}
    
    void ClearGrid(Transform gridParent)
    {
        if (gridParent == null) return;
        foreach (Transform child in gridParent)
        {
            Destroy(child.gameObject);
        }
    }

    // ★引数から teamColor を削除、または使わないようにします★
    void CreateCardOnGrid(SelectableWordEntry cardEntry, Transform parentGrid)
    {
        if (wordCardPrefab_Playable == null || parentGrid == null)
        {
            Debug.LogError("CreateCardOnGrid: wordCardPrefab_Playable または parentGrid が未設定です。");
            return;
        }

        GameObject newCardObject = Instantiate(wordCardPrefab_Playable, parentGrid);
        newCardObject.name = $"PlayedCard_{cardEntry.DisplayNumber}";
        WordCardUI cardUI = newCardObject.GetComponent<WordCardUI>();

        if (cardUI != null)
        {
            // 1. まず、札にワードと番号の情報を設定します
            cardUI.SetCardData(cardEntry.DisplayNumber, cardEntry.Word);

            // 2. 次に、この札を「プレイアブル画面用の表示状態」にします
            //    WordCardUIの元の背景色を取得して渡す (もしWordCardUIがoriginalBackgroundColorをpublicで持っていれば)
            //    あるいは、ここで固定の「選択されていない札の色」を指定する
            Color defaultCardBgColor = Color.white; // ★仮のデフォルト背景色 (WordCard_Templateプレハブの元の色に合わせる)★
                                                    // もし WordCardUI.cs の Awake で originalBackgroundColor を public get で公開していれば、
                                                    // defaultCardBgColor = cardUI.originalBackgroundColor; のように取得できる

            cardUI.SetForPlayableDisplay(defaultCardBgColor);
        }
        else
        {
            //Debug.LogError($"生成した札 ({newCardObject.name}) にWordCardUIスクリプトなし！");
        }
    }
        void DisplayPlayerNames()
    {
        if (WordDataManager.Instance == null)
        {
            Debug.LogError("PlayableCanvasManager: WordDataManagerのインスタンスが見つかりません！");
            return;
        }

        // 源氏軍のプレイヤー名を表示
        if (genjiPlayerNameDisplayTexts_Playable != null)
        {
            for (int i = 0; i < genjiPlayerNameDisplayTexts_Playable.Count; i++)
            {
                if (genjiPlayerNameDisplayTexts_Playable[i] != null)
                {
                    if (i < WordDataManager.Instance.GenjiPlayerCount && i < WordDataManager.Instance.GenjiPlayerNames.Count)
                    {
                        // 参加人数と名前リストの範囲内なら、プレイヤー名を表示
                        genjiPlayerNameDisplayTexts_Playable[i].text = WordDataManager.Instance.GenjiPlayerNames[i];
                        genjiPlayerNameDisplayTexts_Playable[i].gameObject.SetActive(true); // 表示する
                    }
                    else
                    {
                        // 参加人数を超えた、または名前がない表示欄は非表示にする
                        genjiPlayerNameDisplayTexts_Playable[i].text = ""; //念のためクリア
                        genjiPlayerNameDisplayTexts_Playable[i].gameObject.SetActive(false);
                    }
                }
            }
            //Debug.Log($"PlayableCanvasManager: 源氏軍のプレイヤー名表示を更新しました。参加人数: {WordDataManager.Instance.GenjiPlayerCount}人");
        }
        else
        {
            Debug.LogWarning("PlayableCanvasManager: genjiPlayerNameDisplayTexts_Playable がInspectorで設定されていません。");
        }

        // 平氏軍のプレイヤー名を表示 (源氏軍と同様)
        if (heishiPlayerNameDisplayTexts_Playable != null)
        {
            for (int i = 0; i < heishiPlayerNameDisplayTexts_Playable.Count; i++)
            {
                if (heishiPlayerNameDisplayTexts_Playable[i] != null)
                {
                    if (i < WordDataManager.Instance.HeishiPlayerCount && i < WordDataManager.Instance.HeishiPlayerNames.Count)
                    {
                        heishiPlayerNameDisplayTexts_Playable[i].text = WordDataManager.Instance.HeishiPlayerNames[i];
                        heishiPlayerNameDisplayTexts_Playable[i].gameObject.SetActive(true);
                    }
                    else
                    {
                        heishiPlayerNameDisplayTexts_Playable[i].gameObject.SetActive(false);
                    }
                }
            }
            //Debug.Log($"PlayableCanvasManager: 平氏軍のプレイヤー名表示を更新しました。参加人数: {WordDataManager.Instance.HeishiPlayerCount}人");
        }
        else
        {
            Debug.LogWarning("PlayableCanvasManager: heishiPlayerNameDisplayTexts_Playable がInspectorで設定されていません。");
        }
    }
    // ★↑ここまで↑★
    
}
